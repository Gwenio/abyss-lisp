
(uiop:define-package :abyss/test/numbers
	(:use :cl)
	(:mix :fiveam)
	(:import-from :abyss/types
		:+true+ :+false+ :make-app :+eff-exn+ :+eff-fix+ :+eff-ret+
	)
	(:import-from :abyss/error
		:arg-pair-p
	)
	(:import-from :abyss/environment
		:make-environment
	)
	(:import-from :abyss/context
		:initial-context
	)
	(:import-from :abyss/evaluate
		:evaluate
	)
	(:import-from :abyss/numbers
		:int-p-impl :rat-p-impl :num-p-impl
		:add-impl :sub-impl :mul-impl :div-impl
		:min-impl :max-impl :mod-impl :rem-impl
		:abs-impl :num-impl :den-impl
		:=impl :<impl :>impl :<=impl :>=impl
	)
)
(in-package :abyss/test/numbers)

(def-suite* abyss-numbers-tests :in abyss/test:abyss-tests)

(defun root-handler (eff)
	(cond
		((eq eff +eff-ret+) #'identity)
		((eq eff +eff-exn+) #'identity)
		((eq eff +eff-fix+) #'first)
		(t
			(print eff)
			(error "Unexpected effect")
		)
	)
)

(defmacro run-num-case (x env)
	`(initial-context (lambda () (evaluate ,x ,env)) #'root-handler)
)

(test num-add
	(let ((env (make-environment nil)) (add (make-app #'add-impl)))
		(is (= 0 (run-num-case (list add) env)))
		(is (= 1 (run-num-case (list add 1) env)))
		(is (= -1 (run-num-case (list add -1) env)))
		(is (= 3 (run-num-case (list add 1 2) env)))
		(is (= -1 (run-num-case (list add 1 -2) env)))
		(is (= 3/2 (run-num-case (list add 1 1/2) env)))
		(is (= 6 (run-num-case (list add 1 2 3) env)))
	)
)

(test num-sub
	(let ((env (make-environment nil)) (sub (make-app #'sub-impl)))
		(is (arg-pair-p (run-num-case (list sub) env)))
		(is (= -1 (run-num-case (list sub 1) env)))
		(is (= 1 (run-num-case (list sub -1) env)))
		(is (= -1 (run-num-case (list sub 1 2) env)))
		(is (= 1/2 (run-num-case (list sub 1 1/2) env)))
		(is (= 3 (run-num-case (list sub 1 -2) env)))
		(is (= -4 (run-num-case (list sub 1 2 3) env)))
	)
)

(test num-mul
	(let ((env (make-environment nil)) (mul (make-app #'mul-impl)))
		(is (= 1 (run-num-case (list mul) env)))
		(is (= 0 (run-num-case (list mul 0) env)))
		(is (= 2 (run-num-case (list mul 2) env)))
		(is (= -1 (run-num-case (list mul -1) env)))
		(is (= 2 (run-num-case (list mul 1 2) env)))
		(is (= 1/2 (run-num-case (list mul 1 1/2) env)))
		(is (= -2 (run-num-case (list mul 1 -2) env)))
		(is (= 6 (run-num-case (list mul 1 2 3) env)))
	)
)

(test num-div
	(let ((env (make-environment nil)) (div (make-app #'div-impl)))
		(is (arg-pair-p (run-num-case (list div) env)))
		(is (= 1 (run-num-case (list div 1) env)))
		(is (= -1 (run-num-case (list div -1) env)))
		(is (= 1/2 (run-num-case (list div 2) env)))
		(is (= -1/2 (run-num-case (list div -2) env)))
		(is (= 2 (run-num-case (list div 1/2) env)))
		(is (= -2 (run-num-case (list div -1/2) env)))
		(is (= 2 (run-num-case (list div 4 2) env)))
		(is (= 8 (run-num-case (list div 4 1/2) env)))
		(is (= -2 (run-num-case (list div 4 -2) env)))
		(is (= -2 (run-num-case (list div -4 2) env)))
		(is (= 2 (run-num-case (list div -4 -2) env)))
		(is (= 2 (run-num-case (list div 8 2 2) env)))
	)
)

(test num-min
	(let ((env (make-environment nil)) (m (make-app #'min-impl)))
		(is (= 0 (run-num-case (list m 0) env)))
		(is (= 1 (run-num-case (list m 1) env)))
		(is (= -1 (run-num-case (list m -1) env)))
		(is (= 1 (run-num-case (list m 1 2) env)))
		(is (= 1 (run-num-case (list m 2 1) env)))
		(is (= -2 (run-num-case (list m 1 -2) env)))
		(is (= 1/2 (run-num-case (list m 1 1/2) env)))
		(is (= 1 (run-num-case (list m 1 2 3) env)))
		(is (= 1 (run-num-case (list m 2 1 2) env)))
	)
)

(test num-max
	(let ((env (make-environment nil)) (m (make-app #'max-impl)))
		(is (= 0 (run-num-case (list m 0) env)))
		(is (= 1 (run-num-case (list m 1) env)))
		(is (= -1 (run-num-case (list m -1) env)))
		(is (= 2 (run-num-case (list m 1 2) env)))
		(is (= 2 (run-num-case (list m 2 1) env)))
		(is (= 1 (run-num-case (list m 1 -2) env)))
		(is (= 1 (run-num-case (list m 1 1/2) env)))
		(is (= 3 (run-num-case (list m 1 2 3) env)))
		(is (= 2 (run-num-case (list m 2 1 2) env)))
	)
)

(test num-mod
	(let ((env (make-environment nil)) (f (make-app #'mod-impl)))
		(is (= 0 (run-num-case (list f 0 2) env)))
		(is (= 1 (run-num-case (list f 1 2) env)))
		(is (= 1 (run-num-case (list f -1 2) env)))
		(is (= 0 (run-num-case (list f 4 2) env)))
		(is (= 2 (run-num-case (list f 5 3) env)))
		(is (= 0 (run-num-case (list f -4 2) env)))
		(is (= 0 (run-num-case (list f 2 1/2) env)))
		(is (= 0 (run-num-case (list f 2 -1/2) env)))
	)
)

(test num-rem
	(let ((env (make-environment nil)) (f (make-app #'rem-impl)))
		(is (= 0 (run-num-case (list f 0 2) env)))
		(is (= 1 (run-num-case (list f 1 2) env)))
		(is (= -1 (run-num-case (list f -1 2) env)))
		(is (= 0 (run-num-case (list f 4 2) env)))
		(is (= 2 (run-num-case (list f 5 3) env)))
		(is (= 0 (run-num-case (list f -4 2) env)))
		(is (= 0 (run-num-case (list f 2 1/2) env)))
		(is (= 0 (run-num-case (list f 2 -1/2) env)))
	)
)

(test num-abs
	(let ((env (make-environment nil)) (f (make-app #'abs-impl)))
		(is (= 0 (run-num-case (list f 0) env)))
		(is (= 1 (run-num-case (list f 1) env)))
		(is (= 1 (run-num-case (list f -1) env)))
	)
)

(test num-numerator
	(let ((env (make-environment nil)) (f (make-app #'num-impl)))
		(is (= 0 (run-num-case (list f 0) env)))
		(is (= 1 (run-num-case (list f 1) env)))
		(is (= -1 (run-num-case (list f -1) env)))
		(is (= 1 (run-num-case (list f 1/2) env)))
		(is (= -1 (run-num-case (list f -1/2) env)))
	)
)

(test num-denominator
	(let ((env (make-environment nil)) (f (make-app #'den-impl)))
		(is (= 1 (run-num-case (list f 0) env)))
		(is (= 1 (run-num-case (list f 1) env)))
		(is (= 1 (run-num-case (list f -1) env)))
		(is (= 2 (run-num-case (list f 1/2) env)))
		(is (= 2 (run-num-case (list f -1/2) env)))
	)
)

(test num-equal
	(let ((env (make-environment nil)) (f (make-app #'=impl)))
		(is (eq +true+ (run-num-case (list f 0) env)))
		(is (eq +true+ (run-num-case (list f 1) env)))
		(is (eq +true+ (run-num-case (list f -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2) env)))
		(is (eq +true+ (run-num-case (list f 0 0) env)))
		(is (eq +true+ (run-num-case (list f 1 1) env)))
		(is (eq +true+ (run-num-case (list f -1 -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2 -1/2) env)))
		(is (eq +false+ (run-num-case (list f 0 1) env)))
		(is (eq +false+ (run-num-case (list f 1 0) env)))
		(is (eq +false+ (run-num-case (list f 1 -1) env)))
		(is (eq +false+ (run-num-case (list f -1 1) env)))
		(is (eq +false+ (run-num-case (list f 1/2 -1/2) env)))
		(is (eq +false+ (run-num-case (list f -1/2 1/2) env)))
	)
)

(test num-lt
	(let ((env (make-environment nil)) (f (make-app #'<impl)))
		(is (eq +true+ (run-num-case (list f 0) env)))
		(is (eq +true+ (run-num-case (list f 1) env)))
		(is (eq +true+ (run-num-case (list f -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2) env)))
		(is (eq +false+ (run-num-case (list f 0 0) env)))
		(is (eq +false+ (run-num-case (list f 1 1) env)))
		(is (eq +false+ (run-num-case (list f -1 -1) env)))
		(is (eq +false+ (run-num-case (list f 1/2 1/2) env)))
		(is (eq +false+ (run-num-case (list f -1/2 -1/2) env)))
		(is (eq +true+ (run-num-case (list f 0 1) env)))
		(is (eq +false+ (run-num-case (list f 1 0) env)))
		(is (eq +false+ (run-num-case (list f 1 -1) env)))
		(is (eq +true+ (run-num-case (list f -1 1) env)))
		(is (eq +false+ (run-num-case (list f 1/2 -1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2 1/2) env)))
	)
)

(test num-gt
	(let ((env (make-environment nil)) (f (make-app #'>impl)))
		(is (eq +true+ (run-num-case (list f 0) env)))
		(is (eq +true+ (run-num-case (list f 1) env)))
		(is (eq +true+ (run-num-case (list f -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2) env)))
		(is (eq +false+ (run-num-case (list f 0 0) env)))
		(is (eq +false+ (run-num-case (list f 1 1) env)))
		(is (eq +false+ (run-num-case (list f -1 -1) env)))
		(is (eq +false+ (run-num-case (list f 1/2 1/2) env)))
		(is (eq +false+ (run-num-case (list f -1/2 -1/2) env)))
		(is (eq +false+ (run-num-case (list f 0 1) env)))
		(is (eq +true+ (run-num-case (list f 1 0) env)))
		(is (eq +true+ (run-num-case (list f 1 -1) env)))
		(is (eq +false+ (run-num-case (list f -1 1) env)))
		(is (eq +true+ (run-num-case (list f 1/2 -1/2) env)))
		(is (eq +false+ (run-num-case (list f -1/2 1/2) env)))
	)
)

(test num-lteq
	(let ((env (make-environment nil)) (f (make-app #'<=impl)))
		(is (eq +true+ (run-num-case (list f 0) env)))
		(is (eq +true+ (run-num-case (list f 1) env)))
		(is (eq +true+ (run-num-case (list f -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2) env)))
		(is (eq +true+ (run-num-case (list f 0 0) env)))
		(is (eq +true+ (run-num-case (list f 1 1) env)))
		(is (eq +true+ (run-num-case (list f -1 -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2 -1/2) env)))
		(is (eq +true+ (run-num-case (list f 0 1) env)))
		(is (eq +false+ (run-num-case (list f 1 0) env)))
		(is (eq +false+ (run-num-case (list f 1 -1) env)))
		(is (eq +true+ (run-num-case (list f -1 1) env)))
		(is (eq +false+ (run-num-case (list f 1/2 -1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2 1/2) env)))
	)
)

(test num-gteq
	(let ((env (make-environment nil)) (f (make-app #'>=impl)))
		(is (eq +true+ (run-num-case (list f 0) env)))
		(is (eq +true+ (run-num-case (list f 1) env)))
		(is (eq +true+ (run-num-case (list f -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2) env)))
		(is (eq +true+ (run-num-case (list f 0 0) env)))
		(is (eq +true+ (run-num-case (list f 1 1) env)))
		(is (eq +true+ (run-num-case (list f -1 -1) env)))
		(is (eq +true+ (run-num-case (list f 1/2 1/2) env)))
		(is (eq +true+ (run-num-case (list f -1/2 -1/2) env)))
		(is (eq +false+ (run-num-case (list f 0 1) env)))
		(is (eq +true+ (run-num-case (list f 1 0) env)))
		(is (eq +true+ (run-num-case (list f 1 -1) env)))
		(is (eq +false+ (run-num-case (list f -1 1) env)))
		(is (eq +true+ (run-num-case (list f 1/2 -1/2) env)))
		(is (eq +false+ (run-num-case (list f -1/2 1/2) env)))
	)
)
